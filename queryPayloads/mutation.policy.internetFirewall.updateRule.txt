mutation policyInternetFirewallUpdateRule ( $internetFirewallUpdateRuleInput:InternetFirewallUpdateRuleInput! $internetFirewallPolicyMutationInput:InternetFirewallPolicyMutationInput ) {
	policy ( ) {
		internetFirewall ( input:$internetFirewallPolicyMutationInput  )  {
			updateRuleInternetFirewallPolicyMutations: updateRule ( input:$internetFirewallUpdateRuleInput   ) {
				ruleInternetFirewallRuleMutationPayload: rule {
					auditInternetFirewallRulePayload: audit {
						updatedTime
						updatedBy
					}
					ruleInternetFirewallRulePayload: rule {
						id
						name
						description
						index
						sectionInternetFirewallRule: section {
							id
							name
						}

						enabled
						sourceInternetFirewallRule: source {
							ip
							hostInternetFirewallSource: host {
								id
								name
							}
							siteInternetFirewallSource: site {
								id
								name
							}
							subnet
							ipRangeInternetFirewallSource: ipRange {
								from
								to
							}
							globalIpRangeInternetFirewallSource: globalIpRange {
								id
								name
							}
							networkInterfaceInternetFirewallSource: networkInterface {
								id
								name
							}
							siteNetworkSubnetInternetFirewallSource: siteNetworkSubnet {
								id
								name
							}
							floatingSubnetInternetFirewallSource: floatingSubnet {
								id
								name
							}
							userInternetFirewallSource: user {
								id
								name
							}
							usersGroupInternetFirewallSource: usersGroup {
								id
								name
							}
							groupInternetFirewallSource: group {
								id
								name
							}
							systemGroupInternetFirewallSource: systemGroup {
								id
								name
							}
						}

						connectionOriginInternetFirewallRule: connectionOrigin
						countryInternetFirewallRule: country {
							id
							name
						}

						deviceInternetFirewallRule: device {
							id
							name
						}

						deviceOSInternetFirewallRule: deviceOS
						deviceAttributesInternetFirewallRule: deviceAttributes {
							category
							type
							model
							manufacturer
							os
							osVersion
						}

						destinationInternetFirewallRule: destination {
							applicationInternetFirewallDestination: application {
								id
								name
							}
							customAppInternetFirewallDestination: customApp {
								id
								name
							}
							appCategoryInternetFirewallDestination: appCategory {
								id
								name
							}
							customCategoryInternetFirewallDestination: customCategory {
								id
								name
							}
							sanctionedAppsCategoryInternetFirewallDestination: sanctionedAppsCategory {
								id
								name
							}
							countryInternetFirewallDestination: country {
								id
								name
							}
							domain
							fqdn
							ip
							subnet
							ipRangeInternetFirewallDestination: ipRange {
								from
								to
							}
							globalIpRangeInternetFirewallDestination: globalIpRange {
								id
								name
							}
							remoteAsn
							containersInternetFirewallDestination: containers {
								fqdnContainerInternetFirewallContainer: fqdnContainer {
									id
									name
								}

								ipAddressRangeContainerInternetFirewallContainer: ipAddressRangeContainer {
									id
									name
								}

							}
						}

						serviceInternetFirewallRule: service {
							standardInternetFirewallServiceType: standard {
								id
								name
							}
							customInternetFirewallServiceType: custom {
								port
								portRangeCustomService: portRange {
									from
									to
								}

								protocolCustomService: protocol
							}
						}

						actionInternetFirewallRule: action
						trackingInternetFirewallRule: tracking {
							eventPolicyTracking: event {
								enabled
							}
							alertPolicyTracking: alert {
								enabled
								frequencyPolicyRuleTrackingAlert: frequency
								subscriptionGroupPolicyRuleTrackingAlert: subscriptionGroup {
									id
									name
								}

								webhookPolicyRuleTrackingAlert: webhook {
									id
									name
								}

								mailingListPolicyRuleTrackingAlert: mailingList {
									id
									name
								}

							}
						}

						scheduleInternetFirewallRule: schedule {
							activeOnPolicySchedule: activeOn
							customTimeframePolicySchedule: customTimeframe {
								from
								to
							}
							customRecurringPolicySchedule: customRecurring {
								from
								to
								days
							}
						}

						activePeriodInternetFirewallRule: activePeriod {
							useEffectiveFrom
							effectiveFrom
							useExpiresAt
							expiresAt
						}

						exceptionsInternetFirewallRule: exceptions {
							name
							sourceInternetFirewallRuleException: source {
								ip
								hostInternetFirewallSource: host {
									id
									name
								}

								siteInternetFirewallSource: site {
									id
									name
								}

								subnet
								ipRangeInternetFirewallSource: ipRange {
									from
									to
								}

								globalIpRangeInternetFirewallSource: globalIpRange {
									id
									name
								}

								networkInterfaceInternetFirewallSource: networkInterface {
									id
									name
								}

								siteNetworkSubnetInternetFirewallSource: siteNetworkSubnet {
									id
									name
								}

								floatingSubnetInternetFirewallSource: floatingSubnet {
									id
									name
								}

								userInternetFirewallSource: user {
									id
									name
								}

								usersGroupInternetFirewallSource: usersGroup {
									id
									name
								}

								groupInternetFirewallSource: group {
									id
									name
								}

								systemGroupInternetFirewallSource: systemGroup {
									id
									name
								}

							}
							deviceOSInternetFirewallRuleException: deviceOS
							countryInternetFirewallRuleException: country {
								id
								name
							}
							deviceInternetFirewallRuleException: device {
								id
								name
							}
							deviceAttributesInternetFirewallRuleException: deviceAttributes {
								category
								type
								model
								manufacturer
								os
								osVersion
							}
							destinationInternetFirewallRuleException: destination {
								applicationInternetFirewallDestination: application {
									id
									name
								}

								customAppInternetFirewallDestination: customApp {
									id
									name
								}

								appCategoryInternetFirewallDestination: appCategory {
									id
									name
								}

								customCategoryInternetFirewallDestination: customCategory {
									id
									name
								}

								sanctionedAppsCategoryInternetFirewallDestination: sanctionedAppsCategory {
									id
									name
								}

								countryInternetFirewallDestination: country {
									id
									name
								}

								domain
								fqdn
								ip
								subnet
								ipRangeInternetFirewallDestination: ipRange {
									from
									to
								}

								globalIpRangeInternetFirewallDestination: globalIpRange {
									id
									name
								}

								remoteAsn
								containersInternetFirewallDestination: containers {
									fqdnContainerInternetFirewallContainer: fqdnContainer {
										id
										name
									}
									ipAddressRangeContainerInternetFirewallContainer: ipAddressRangeContainer {
										id
										name
									}
								}

							}
							serviceInternetFirewallRuleException: service {
								standardInternetFirewallServiceType: standard {
									id
									name
								}

								customInternetFirewallServiceType: custom {
									port
									portRangeCustomService: portRange {
										from
										to
									}
									protocolCustomService: protocol
								}

							}
							connectionOriginInternetFirewallRuleException: connectionOrigin
						}

					}
					propertiesInternetFirewallRulePayload: properties
				}

				statusInternetFirewallRuleMutationPayload: status
				errorsInternetFirewallRuleMutationPayload: errors {
					errorMessage
					errorCode
				}

			}
		}

	}	
}