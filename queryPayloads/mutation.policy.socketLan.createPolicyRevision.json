{
    "operationName": "policySocketLanCreatePolicyRevision",
    "query": "mutation policySocketLanCreatePolicyRevision ( $policyCreateRevisionInput:PolicyCreateRevisionInput! $socketLanPolicyMutationInput:SocketLanPolicyMutationInput ) { policy ( ) { socketLan ( input:$socketLanPolicyMutationInput ) { createPolicyRevision ( input:$policyCreateRevisionInput ) { socketLanPolicyPolicy: policy { enabled rules { policyElementAuditAudit: audit { updatedTime updatedBy } socketLanRuleRule: rule { id name description index policySectionInfoSection: section { id name } enabled socketLanFirewallRulePayloadFirewall: firewall { policyElementAuditAudit: audit { updatedTime updatedBy } socketLanFirewallRuleRule: rule { id name description index policySectionInfoSection: section {  id  name } enabled socketLanFirewallSourceSource: source {  vlan  mac  ipAddressRangeIpRange: ipRange { from to  } groupRefGroup: group { id name  } subnet  siteRefSite: site { id name  } networkInterfaceRefNetworkInterface: networkInterface { id name  } systemGroupRefSystemGroup: systemGroup { id name  } hostRefHost: host { id name  } ip  globalIpRangeRefGlobalIpRange: globalIpRange { id name  } floatingSubnetRefFloatingSubnet: floatingSubnet { id name  } siteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name  }  } socketLanFirewallDestinationDestination: destination {  vlan  ipAddressRangeIpRange: ipRange { from to  } subnet  siteRefSite: site { id name  } networkInterfaceRefNetworkInterface: networkInterface { id name  } systemGroupRefSystemGroup: systemGroup { id name  } hostRefHost: host { id name  } ip  globalIpRangeRefGlobalIpRange: globalIpRange { id name  } groupRefGroup: group { id name  } floatingSubnetRefFloatingSubnet: floatingSubnet { id name  } siteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name  }  } socketLanFirewallDirectionDirection: direction socketLanFirewallApplicationApplication: application {  applicationRefApplication: application { id name  } customApplicationRefCustomApp: customApp { id name  } domain  fqdn  ip  subnet  ipAddressRangeIpRange: ipRange { from to  } globalIpRangeRefGlobalIpRange: globalIpRange { id name  }  } socketLanFirewallServiceTypeService: service {  simpleServiceSimple: simple { simpleServiceTypeName: name  } serviceRefStandard: standard { id name  } customServiceCustom: custom { port portRangePortRange: portRange { from to } ipProtocolProtocol: protocol  }  } socketLanFirewallActionAction: action policyTrackingTracking: tracking {  policyRuleTrackingEventEvent: event { enabled  } policyRuleTrackingAlertAlert: alert { enabled policyRuleTrackingFrequencyEnumFrequency: frequency subscriptionGroupRefSubscriptionGroup: subscriptionGroup { id name } subscriptionWebhookRefWebhook: webhook { id name } subscriptionMailingListRefMailingList: mailingList { id name }  }  } } policyElementPropertiesEnumProperties: properties } socketLanSiteSite: site { siteRefSite: site { id name } groupRefGroup: group { id name } } socketLanSourceSource: source { vlan ipAddressRangeIpRange: ipRange { from to } groupRefGroup: group { id name } subnet networkInterfaceRefNetworkInterface: networkInterface { id name } systemGroupRefSystemGroup: systemGroup { id name } hostRefHost: host { id name } ip globalIpRangeRefGlobalIpRange: globalIpRange { id name } floatingSubnetRefFloatingSubnet: floatingSubnet { id name } siteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name } } socketLanDestinationDestination: destination { vlan ipAddressRangeIpRange: ipRange { from to } subnet networkInterfaceRefNetworkInterface: networkInterface { id name } systemGroupRefSystemGroup: systemGroup { id name } hostRefHost: host { id name } ip globalIpRangeRefGlobalIpRange: globalIpRange { id name } groupRefGroup: group { id name } floatingSubnetRefFloatingSubnet: floatingSubnet { id name } siteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name } } socketLanDirectionDirection: direction socketLanServiceService: service { simpleServiceSimple: simple { simpleServiceTypeName: name } customServiceCustom: custom { port portRangePortRange: portRange {  from  to } ipProtocolProtocol: protocol } } socketLanNatSettingsNat: nat { enabled socketLanNatTypeNatType: natType } socketLanTransportTypeTransport: transport } policyElementPropertiesEnumProperties: properties } sections { policyElementAuditAudit: audit { updatedTime updatedBy } policySectionInfoSection: section { id name } policyElementPropertiesEnumProperties: properties } audit { publishedTime publishedBy } revision { id name description changes createdTime updatedTime } } policyMutationStatusStatus: status policyMutationErrorErrors: errors { errorMessage errorCode } } } } }",
    "variables": {
        "policyCreateRevisionInput": {
            "description": {
                "description": "String"
            },
            "name": {
                "name": "String"
            }
        },
        "socketLanPolicyMutationInput": {
            "policyMutationRevisionInput": {
                "id": {
                    "id": "ID"
                }
            }
        }
    }
}