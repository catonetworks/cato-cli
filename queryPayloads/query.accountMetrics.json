{
    "operationName": "accountMetrics",
    "query": "query accountMetrics ( $toRate:Boolean $perSecond:Boolean $withMissingData:Boolean $buckets:Int $labels:[TimeseriesMetricType!] $types:[String!] $siteIDs:[ID!] $userIDs:[ID!] $timeFrame:TimeFrame! $groupInterfaces:Boolean $groupDevices:Boolean ) { accountMetrics ( timeFrame:$timeFrame groupInterfaces:$groupInterfaces groupDevices:$groupDevices ) { id from to granularity sites ( siteIDs:$siteIDs ) { id interfaceMetricsInterfaces: interfaces { metricsMetrics: metrics ( toRate:$toRate ) { duration granularity bytesDownstream bytesUpstream bytesTotal lostDownstream lostDownstreamPcnt lostUpstream lostUpstreamPcnt packetsDownstream packetsUpstream jitterUpstream jitterDownstream packetsDiscardedDownstream packetsDiscardedUpstream rtt hostCount hostLimit flowCount } name timeseriesTimeseries: timeseries ( buckets:$buckets labels:$labels ) { data ( perSecond:$perSecond withMissingData:$withMissingData ) label dimensionDataDimensions: dimensions { label value } timeseriesKeyKey: key { measureFieldName dimensions { fieldName value } } sum unitTypeUnits: units info } timeAnnotationAnnotations: annotations ( types:$types ) { time label shortLabel annotationTypeType: type } timePeriodPeriods: periods { duration title periodTypeType: type } iPInfoRemoteIPInfo: remoteIPInfo { ip countryCode countryName city state provider latitude longitude } remoteIP socketInfoSocketInfo: socketInfo { id serial isPrimary platform version versionUpdateTime } iPSecInfoIpsecInfo: ipsecInfo { isPrimary catoIP remoteIP ikeVersion } interfaceInfoInterfaceInfo: interfaceInfo { id name upstreamBandwidth downstreamBandwidth destType } } metricsMetrics: metrics ( toRate:$toRate ) { duration granularity bytesDownstream bytesUpstream bytesTotal lostDownstream lostDownstreamPcnt lostUpstream lostUpstreamPcnt packetsDownstream packetsUpstream jitterUpstream jitterDownstream packetsDiscardedDownstream packetsDiscardedUpstream rtt hostCount hostLimit flowCount } name siteInfoInfo: info { name type description countryCode region countryName countryStateName cityName isHA connType creationTime interfaces { id name upstreamBandwidth downstreamBandwidth destType } sockets { id serial isPrimary socketPlatformPlatform: platform version versionUpdateTime } ipsec { isPrimary catoIP remoteIP ikeVersion } } timeseriesHostCount: hostCount { data ( perSecond:$perSecond withMissingData:$withMissingData ) label dimensions { label value } key { measureFieldName dimensions { fieldName value } } sum units info } timeseriesFlowCount: flowCount { data ( perSecond:$perSecond withMissingData:$withMissingData ) label dimensions { label value } key { measureFieldName dimensions { fieldName value } } sum units info } timeseriesHostLimit: hostLimit { data ( perSecond:$perSecond withMissingData:$withMissingData ) label dimensions { label value } key { measureFieldName dimensions { fieldName value } } sum units info } samples } users ( userIDs:$userIDs ) { id interfaceMetricsInterfaces: interfaces { metricsMetrics: metrics ( toRate:$toRate ) { duration granularity bytesDownstream bytesUpstream bytesTotal lostDownstream lostDownstreamPcnt lostUpstream lostUpstreamPcnt packetsDownstream packetsUpstream jitterUpstream jitterDownstream packetsDiscardedDownstream packetsDiscardedUpstream rtt hostCount hostLimit flowCount } name timeseriesTimeseries: timeseries ( buckets:$buckets labels:$labels ) { data ( perSecond:$perSecond withMissingData:$withMissingData ) label dimensionDataDimensions: dimensions { label value } timeseriesKeyKey: key { measureFieldName dimensions { fieldName value } } sum unitTypeUnits: units info } timeAnnotationAnnotations: annotations ( types:$types ) { time label shortLabel annotationTypeType: type } timePeriodPeriods: periods { duration title periodTypeType: type } iPInfoRemoteIPInfo: remoteIPInfo { ip countryCode countryName city state provider latitude longitude } remoteIP socketInfoSocketInfo: socketInfo { id serial isPrimary platform version versionUpdateTime } iPSecInfoIpsecInfo: ipsecInfo { isPrimary catoIP remoteIP ikeVersion } interfaceInfoInterfaceInfo: interfaceInfo { id name upstreamBandwidth downstreamBandwidth destType } } metricsMetrics: metrics ( toRate:$toRate ) { duration granularity bytesDownstream bytesUpstream bytesTotal lostDownstream lostDownstreamPcnt lostUpstream lostUpstreamPcnt packetsDownstream packetsUpstream jitterUpstream jitterDownstream packetsDiscardedDownstream packetsDiscardedUpstream rtt hostCount hostLimit flowCount } name siteInfoInfo: info { name type description countryCode region countryName countryStateName cityName isHA connType creationTime interfaces { id name upstreamBandwidth downstreamBandwidth destType } sockets { id serial isPrimary socketPlatformPlatform: platform version versionUpdateTime } ipsec { isPrimary catoIP remoteIP ikeVersion } } timeseriesHostCount: hostCount { data ( perSecond:$perSecond withMissingData:$withMissingData ) label dimensions { label value } key { measureFieldName dimensions { fieldName value } } sum units info } timeseriesFlowCount: flowCount { data ( perSecond:$perSecond withMissingData:$withMissingData ) label dimensions { label value } key { measureFieldName dimensions { fieldName value } } sum units info } timeseriesHostLimit: hostLimit { data ( perSecond:$perSecond withMissingData:$withMissingData ) label dimensions { label value } key { measureFieldName dimensions { fieldName value } } sum units info } samples } timeseries ( labels:$labels buckets:$buckets ) { data ( perSecond:$perSecond withMissingData:$withMissingData ) label dimensionDataDimensions: dimensions { label value } timeseriesKeyKey: key { measureFieldName dimensions { fieldName value } } sum unitTypeUnits: units info } } }",
    "variables": {
        "buckets": "Int",
        "groupDevices": "Boolean",
        "groupInterfaces": "Boolean",
        "labels": "enum(TimeseriesMetricType)",
        "perSecond": "Boolean",
        "siteIDs": [
            "ID"
        ],
        "timeFrame": "TimeFrame",
        "toRate": "Boolean",
        "types": [
            "String"
        ],
        "userIDs": [
            "ID"
        ],
        "withMissingData": "Boolean"
    }
}