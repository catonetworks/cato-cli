query policy ( $appTenantRestrictionPolicyInput:AppTenantRestrictionPolicyInput $dynamicIpAllocationPolicyInput:DynamicIpAllocationPolicyInput $internetFirewallPolicyInput:InternetFirewallPolicyInput $remotePortFwdPolicyInput:RemotePortFwdPolicyInput $wanFirewallPolicyInput:WanFirewallPolicyInput ) { policy ( ) { appTenantRestriction { policy ( input:$appTenantRestrictionPolicyInput ) { enabled appTenantRestrictionRulePayloadRules: rules { policyElementAuditAudit: audit { updatedTime updatedBy } appTenantRestrictionRuleRule: rule { id name description index policySectionInfoSection: section { id name } enabled applicationRefApplication: application { id name } appTenantRestrictionHeaderValueHeaders: headers { name value } appTenantRestrictionSourceSource: source { ip hostRefHost: host { id name } siteRefSite: site { id name } subnet ipAddressRangeIpRange: ipRange { from to } globalIpRangeRefGlobalIpRange: globalIpRange { id name } networkInterfaceRefNetworkInterface: networkInterface { id name } siteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name } floatingSubnetRefFloatingSubnet: floatingSubnet { id name } userRefUser: user { id name } usersGroupRefUsersGroup: usersGroup { id name } groupRefGroup: group { id name } systemGroupRefSystemGroup: systemGroup { id name } countryRefCountry: country { id name } } policyScheduleSchedule: schedule { policyActiveOnEnumActiveOn: activeOn policyCustomTimeframeCustomTimeframe: customTimeframe { from to } policyCustomRecurringCustomRecurring: customRecurring { from to days } } appTenantRestrictionActionEnumAction: action appTenantRestrictionSeverityEnumSeverity: severity } policyElementPropertiesEnumProperties: properties } policySectionPayloadSections: sections { policyElementAuditAudit: audit { updatedTime updatedBy } policySectionInfoSection: section { id name } policyElementPropertiesEnumProperties: properties } policyAuditAudit: audit { publishedTime publishedBy } policyRevisionRevision: revision { id name description changes createdTime updatedTime } } revisions { revision { id name description changes createdTime updatedTime } } } dynamicIpAllocation { policy ( input:$dynamicIpAllocationPolicyInput ) { enabled dynamicIpAllocationRulePayloadRules: rules { policyElementAuditAudit: audit { updatedTime updatedBy } dynamicIpAllocationRuleRule: rule { id name description index policySectionInfoSection: section { id name } enabled dynamicIpAllocationSourceSource: source { userRefUser: user { id name } usersGroupRefUsersGroup: usersGroup { id name } } operatingSystemPlatform: platform countryRefCountry: country { id name } dynamicIpAllocationRangeRange: range { globalIpRangeRefGlobalIpRange: globalIpRange { id name } } } policyElementPropertiesEnumProperties: properties } policySectionPayloadSections: sections { policyElementAuditAudit: audit { updatedTime updatedBy } policySectionInfoSection: section { id name } policyElementPropertiesEnumProperties: properties } policyAuditAudit: audit { publishedTime publishedBy } policyRevisionRevision: revision { id name description changes createdTime updatedTime } } revisions { revision { id name description changes createdTime updatedTime } } } internetFirewall { policy ( input:$internetFirewallPolicyInput ) { enabled internetFirewallRulePayloadRules: rules { policyElementAuditAudit: audit { updatedTime updatedBy } internetFirewallRuleRule: rule { id name description index policySectionInfoSection: section { id name } enabled internetFirewallSourceSource: source { ip hostRefHost: host { id name } siteRefSite: site { id name } subnet ipAddressRangeIpRange: ipRange { from to } globalIpRangeRefGlobalIpRange: globalIpRange { id name } networkInterfaceRefNetworkInterface: networkInterface { id name } siteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name } floatingSubnetRefFloatingSubnet: floatingSubnet { id name } userRefUser: user { id name } usersGroupRefUsersGroup: usersGroup { id name } groupRefGroup: group { id name } systemGroupRefSystemGroup: systemGroup { id name } } connectionOriginEnumConnectionOrigin: connectionOrigin countryRefCountry: country { id name } deviceProfileRefDevice: device { id name } operatingSystemDeviceOS: deviceOS deviceAttributesDeviceAttributes: deviceAttributes { category type model manufacturer os osVersion } internetFirewallDestinationDestination: destination { applicationRefApplication: application { id name } customApplicationRefCustomApp: customApp { id name } applicationCategoryRefAppCategory: appCategory { id name } customCategoryRefCustomCategory: customCategory { id name } sanctionedAppsCategoryRefSanctionedAppsCategory: sanctionedAppsCategory { id name } countryRefCountry: country { id name } domain fqdn ip subnet ipAddressRangeIpRange: ipRange { from to } globalIpRangeRefGlobalIpRange: globalIpRange { id name } remoteAsn internetFirewallContainerContainers: containers { fqdnContainerRefFqdnContainer: fqdnContainer { id name } ipAddressRangeContainerRefIpAddressRangeContainer: ipAddressRangeContainer { id name } } } internetFirewallServiceTypeService: service { serviceRefStandard: standard { id name } customServiceCustom: custom { port portRangePortRange: portRange { from to } ipProtocolProtocol: protocol } } internetFirewallActionEnumAction: action policyTrackingTracking: tracking { policyRuleTrackingEventEvent: event { enabled } policyRuleTrackingAlertAlert: alert { enabled policyRuleTrackingFrequencyEnumFrequency: frequency subscriptionGroupRefSubscriptionGroup: subscriptionGroup { id name } subscriptionWebhookRefWebhook: webhook { id name } subscriptionMailingListRefMailingList: mailingList { id name } } } policyScheduleSchedule: schedule { policyActiveOnEnumActiveOn: activeOn policyCustomTimeframeCustomTimeframe: customTimeframe { from to } policyCustomRecurringCustomRecurring: customRecurring { from to days } } internetFirewallRuleExceptionExceptions: exceptions { name internetFirewallSourceSource: source { ip hostRefHost: host { id name } siteRefSite: site { id name } subnet ipAddressRangeIpRange: ipRange { from to } globalIpRangeRefGlobalIpRange: globalIpRange { id name } networkInterfaceRefNetworkInterface: networkInterface { id name } siteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name } floatingSubnetRefFloatingSubnet: floatingSubnet { id name } userRefUser: user { id name } usersGroupRefUsersGroup: usersGroup { id name } groupRefGroup: group { id name } systemGroupRefSystemGroup: systemGroup { id name } } operatingSystemDeviceOS: deviceOS countryRefCountry: country { id name } deviceProfileRefDevice: device { id name } deviceAttributesDeviceAttributes: deviceAttributes { category type model manufacturer os osVersion } internetFirewallDestinationDestination: destination { applicationRefApplication: application { id name } customApplicationRefCustomApp: customApp { id name } applicationCategoryRefAppCategory: appCategory { id name } customCategoryRefCustomCategory: customCategory { id name } sanctionedAppsCategoryRefSanctionedAppsCategory: sanctionedAppsCategory { id name } countryRefCountry: country { id name } domain fqdn ip subnet ipAddressRangeIpRange: ipRange { from to } globalIpRangeRefGlobalIpRange: globalIpRange { id name } remoteAsn internetFirewallContainerContainers: containers { fqdnContainerRefFqdnContainer: fqdnContainer {  id  name } ipAddressRangeContainerRefIpAddressRangeContainer: ipAddressRangeContainer {  id  name } } } internetFirewallServiceTypeService: service { serviceRefStandard: standard { id name } customServiceCustom: custom { port portRangePortRange: portRange {  from  to } ipProtocolProtocol: protocol } } connectionOriginEnumConnectionOrigin: connectionOrigin } } policyElementPropertiesEnumProperties: properties } policySectionPayloadSections: sections { policyElementAuditAudit: audit { updatedTime updatedBy } policySectionInfoSection: section { id name } policyElementPropertiesEnumProperties: properties } policyAuditAudit: audit { publishedTime publishedBy } policyRevisionRevision: revision { id name description changes createdTime updatedTime } } revisions { revision { id name description changes createdTime updatedTime } } } remotePortFwd { policy ( input:$remotePortFwdPolicyInput ) { enabled remotePortFwdRulePayloadRules: rules { policyElementAuditAudit: audit { updatedTime updatedBy } remotePortFwdRuleRule: rule { id name description index policySectionInfoSection: section { id name } enabled forwardIcmp allocatedIpRefExternalIp: externalIp { id name } portRangeExternalPortRange: externalPortRange { from to } internalIp portRangeInternalPortRange: internalPortRange { from to } remotePortFwdRemoteIpsRemoteIPs: remoteIPs { ip ipAddressRangeIpRange: ipRange { from to } subnet globalIpRangeRefGlobalIpRange: globalIpRange { id name } } remotePortFwdRestrictionTypeRestrictionType: restrictionType policyRuleTrackingAlertTracking: tracking { enabled policyRuleTrackingFrequencyEnumFrequency: frequency subscriptionGroupRefSubscriptionGroup: subscriptionGroup { id name } subscriptionWebhookRefWebhook: webhook { id name } subscriptionMailingListRefMailingList: mailingList { id name } } } policyElementPropertiesEnumProperties: properties } policySectionPayloadSections: sections { policyElementAuditAudit: audit { updatedTime updatedBy } policySectionInfoSection: section { id name } policyElementPropertiesEnumProperties: properties } policyAuditAudit: audit { publishedTime publishedBy } policyRevisionRevision: revision { id name description changes createdTime updatedTime } } revisions { revision { id name description changes createdTime updatedTime } } } wanFirewall { policy ( input:$wanFirewallPolicyInput ) { enabled wanFirewallRulePayloadRules: rules { policyElementAuditAudit: audit { updatedTime updatedBy } wanFirewallRuleRule: rule { id name description index policySectionInfoSection: section { id name } enabled wanFirewallSourceSource: source { hostRefHost: host { id name } siteRefSite: site { id name } subnet ip ipAddressRangeIpRange: ipRange { from to } globalIpRangeRefGlobalIpRange: globalIpRange { id name } networkInterfaceRefNetworkInterface: networkInterface { id name } siteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name } floatingSubnetRefFloatingSubnet: floatingSubnet { id name } userRefUser: user { id name } usersGroupRefUsersGroup: usersGroup { id name } groupRefGroup: group { id name } systemGroupRefSystemGroup: systemGroup { id name } } connectionOriginEnumConnectionOrigin: connectionOrigin countryRefCountry: country { id name } deviceProfileRefDevice: device { id name } operatingSystemDeviceOS: deviceOS deviceAttributesDeviceAttributes: deviceAttributes { category type model manufacturer os osVersion } wanFirewallDestinationDestination: destination { hostRefHost: host { id name } siteRefSite: site { id name } subnet ip ipAddressRangeIpRange: ipRange { from to } globalIpRangeRefGlobalIpRange: globalIpRange { id name } networkInterfaceRefNetworkInterface: networkInterface { id name } siteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name } floatingSubnetRefFloatingSubnet: floatingSubnet { id name } userRefUser: user { id name } usersGroupRefUsersGroup: usersGroup { id name } groupRefGroup: group { id name } systemGroupRefSystemGroup: systemGroup { id name } } wanFirewallApplicationApplication: application { applicationRefApplication: application { id name } applicationCategoryRefAppCategory: appCategory { id name } customApplicationRefCustomApp: customApp { id name } customCategoryRefCustomCategory: customCategory { id name } sanctionedAppsCategoryRefSanctionedAppsCategory: sanctionedAppsCategory { id name } domain fqdn ip subnet ipAddressRangeIpRange: ipRange { from to } globalIpRangeRefGlobalIpRange: globalIpRange { id name } } wanFirewallServiceTypeService: service { serviceRefStandard: standard { id name } customServiceCustom: custom { port portRangePortRange: portRange { from to } ipProtocolProtocol: protocol } } wanFirewallActionEnumAction: action policyTrackingTracking: tracking { policyRuleTrackingEventEvent: event { enabled } policyRuleTrackingAlertAlert: alert { enabled policyRuleTrackingFrequencyEnumFrequency: frequency subscriptionGroupRefSubscriptionGroup: subscriptionGroup { id name } subscriptionWebhookRefWebhook: webhook { id name } subscriptionMailingListRefMailingList: mailingList { id name } } } policyScheduleSchedule: schedule { policyActiveOnEnumActiveOn: activeOn policyCustomTimeframeCustomTimeframe: customTimeframe { from to } policyCustomRecurringCustomRecurring: customRecurring { from to days } } wanFirewallDirectionEnumDirection: direction wanFirewallRuleExceptionExceptions: exceptions { name wanFirewallSourceSource: source { hostRefHost: host { id name } siteRefSite: site { id name } subnet ip ipAddressRangeIpRange: ipRange { from to } globalIpRangeRefGlobalIpRange: globalIpRange { id name } networkInterfaceRefNetworkInterface: networkInterface { id name } siteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name } floatingSubnetRefFloatingSubnet: floatingSubnet { id name } userRefUser: user { id name } usersGroupRefUsersGroup: usersGroup { id name } groupRefGroup: group { id name } systemGroupRefSystemGroup: systemGroup { id name } } operatingSystemDeviceOS: deviceOS wanFirewallDestinationDestination: destination { hostRefHost: host { id name } siteRefSite: site { id name } subnet ip ipAddressRangeIpRange: ipRange { from to } globalIpRangeRefGlobalIpRange: globalIpRange { id name } networkInterfaceRefNetworkInterface: networkInterface { id name } siteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name } floatingSubnetRefFloatingSubnet: floatingSubnet { id name } userRefUser: user { id name } usersGroupRefUsersGroup: usersGroup { id name } groupRefGroup: group { id name } systemGroupRefSystemGroup: systemGroup { id name } } countryRefCountry: country { id name } deviceProfileRefDevice: device { id name } deviceAttributesDeviceAttributes: deviceAttributes { category type model manufacturer os osVersion } wanFirewallApplicationApplication: application { applicationRefApplication: application { id name } applicationCategoryRefAppCategory: appCategory { id name } customApplicationRefCustomApp: customApp { id name } customCategoryRefCustomCategory: customCategory { id name } sanctionedAppsCategoryRefSanctionedAppsCategory: sanctionedAppsCategory { id name } domain fqdn ip subnet ipAddressRangeIpRange: ipRange { from to } globalIpRangeRefGlobalIpRange: globalIpRange { id name } } wanFirewallServiceTypeService: service { serviceRefStandard: standard { id name } customServiceCustom: custom { port portRangePortRange: portRange {  from  to } ipProtocolProtocol: protocol } } connectionOriginEnumConnectionOrigin: connectionOrigin wanFirewallDirectionEnumDirection: direction } } policyElementPropertiesEnumProperties: properties } policySectionPayloadSections: sections { policyElementAuditAudit: audit { updatedTime updatedBy } policySectionInfoSection: section { id name } policyElementPropertiesEnumProperties: properties } policyAuditAudit: audit { publishedTime publishedBy } policyRevisionRevision: revision { id name description changes createdTime updatedTime } } revisions { revision { id name description changes createdTime updatedTime } } } } }